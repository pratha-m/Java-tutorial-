Binary Tree
Binary Search Tree
AVL Tree



Data
Left Child Address 
Right Child Address

class Node{
	int Data;
	Node left, right;
	Node (int Data){
		this.Data = Data;
		left = right = null;
	}
}


Basic Opeartion on binary tree:
Inserting Element
Update Element
Deleting Element
Searching Element
Traversing Element

Other Opeartions:
Finding Height of Tree
Finding Level of Tree
Finding Size of Tree

			1
                    2       3
                 4    5   6   7

Binary Tree Traversal:
DFS (Depth First Search):
	1. Inorder Traversal (left - current - right) - 4 2 5 1 6 3 7
	2. Preorder Traversal (current - left - right) - 1 2 4 5 3 6 7
	3. Postorder Traversal (left - right - current) - 4 5 2 6 7 3 1

BFS (Breadth First Search)
	1. LevelOrder Traversal - 1 2 3 4 5 6 7

Boundry Traversal - 1 2 4 5 6 7 3
Diognal Traversal - 1 3 7 6 2 5 4, 1 3 7 2 5 4



Tree Implementation
class Main{
	class Node{
	int Data;
	Node left, right;
	Node (int Data){
		this.Data = Data;
		left = right = null;
	}

	static void Inorder(Node root){
		if (root == null)
			return;

		Inorder(root.left);
		System.out.print(root.Data + " ");  
		Inorder(root.right);	
	}

	static void Preorder(Node root){
		if (root == null)
			return;

		System.out.print(root.Data + " ");
		Inorder(root.left);
		Inorder(root.right);	
	}

	static void Postorder(Node root){
		if (root == null)
			return;

		Inorder(root.left);
		Inorder(root.right);
		System.out.print(root.Data + " ");
	}

			1
                    2       3
                 4    5   6   7

	static void Levelorder(Node root){
		Queue <Node> q = new LinkedList<Node>();
		q.add(root);

		while(!q.isEmpty()){
			Node temp = q.poll();
			System.out.print(temp.data + " ");

			if (temp.left != null)
				q.add(temp.left);

			if (temp.right != null)
				q.add(temp.right);
		}
	}

	public static void main(String [] args){
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.left = new Node(4);
		root.left.right	 = new Node(5);
		root.right.left = new Node(6);
		root.right.right = new Node(7);	
		Inorder(root);
	}
}


Types of Tree (Visual):
Based on number of childrens
1. Full Binary Tree (can have 2 or no child)
		12
            7        16
         4    9

2. Degenerated Binary Tree (can have only 1 child, left or right)
                12
             4
                6
                  7
                     8

3. Skewed Binary Tree
		Left			Right
                50			50
              40			  60
            30				    67
          20				      72
        10                                      75



Based on completion of Levels
1. Complete Binary Tree 
			1
                  2          3
               4     5    6

2. Perfect Binary Tree
			1
                  2          3
               4     5    6     7

3. Balanced Tree (Difference betwen left leaf and right leaf cannot exceed 1)
		Un-Blanced					Balanced
			1					   1
                  2          3                                2         3
               4     5    6                                4     5          6
            7                                           7




Actual Types of Trees:
1. Binary Tree
2. Binary Search Tree
3. AVL Tree
4. Red-Black Tree
5. B Tree
6. B+ Tree
7. Segment Tree



Binary Search Tree: 8 3 10 1 6 4 7 13 14

			8
                  3           10
               1     6           13
                    4 7             14

Implementation of BST:
class Main{
	static class Node{
	int Data;
	int Height;
	Node left, right;
	Node (int Data){
		this.Data = Data;
		left = right = null;
	}

	static Node insert(Node root, int Data){
		if (root == null)
			return new Node(Data);

		if (Data < root.Data)
			root.left = insert(root.left, Data);
		
		else if (Data > root.Data)
			root.right = insert(root.right, Data);

		return root;
	}
	
	public static void main(Stirng [] args){
		Node root = null;
		root = insert(root, 8);
		insert(root, 3);
		insert(root, 10);
		insert(root, 1);
		insert(root, 6);
		insert(root, 13);
		insert(root, 4);
		insert(root, 7);
		insert(root, 14);
	}
}



1. Print Nodes of specific Level:
static void PrintLevel(Node root, int level){
	if (root==null)
		return;

	if (level==1)
		System.out.println(root.Data);
		return;

	else if (level > 1)
		PrintLevel(root.left, level-1);
		PrintLevel(root.right, level-1);
}


2. Print all leaf Nodes
static void LeafNodes(Node root){
	if (root==null)
		return;

	if (root.left == null && root.right == null)
		System.out.print(root.Data + " ");

	if (root.left != null)
		LeafNodes(root.left);

	if (root.right != null)
		LeafNodes(root.right);
}


3. Print all non leaf Nodes
static void LeafNodes(Node root){
	if (root==null)
		return;

	if (root.left != null || root.right != null)
		System.out.print(root.Data + " ");

	if (root.left != null)
		LeafNodes(root.left);

	if (root.right != null)
		LeafNodes(root.right);
}


4. Right View of Tree
static LH;
static void RightView(Node root, int RH){
	if (root==null)
		return;

	if (LH < RH) {
		System.out.print(root.Data+" ");
		LH = RH;
	}

	RightView(root.right, RH+1);
	RightView(root.left, RH+1);
}
RightView(root, 1); // function call



5. Left View of Tree
static LH;
static void LeftView(Node root, int RH){
	if (root==null)
		return;

	if (LH < RH) {
		System.out.print(root.Data+" ");
		LH = RH;
	}

	LeftView(root.left, RH+1);
	LeftView(root.right, RH+1);
}
LeftView(root, 1); // function call


6. Height of Tree
static int Height(Node root){
	if (root==null)
		return 0;

	int LeftHeight = Height(root.left);
	int RightHeight = Height(root.right);

	if (LeftHeight > Rheight)
		return (LeftHeight+1);
	else 
		return (RIghtHeight+1);
}
int height = 1+Math.max(Height(root.left), Height(root.right));



7. Finding the smallest node in BST
static int MinNode(Node root){
	while(root!=null && root.left!=null)
		root = root.left;
	return (root.Data)
} 


8. Total nodes in BST
static int NodesCount(Node root){
	if (root==null)
		return 0;

	else 
		return NodesCount(root.left)+NodesCount(root.right)+1;
}


9. Delete BST
static Node emptyBST(Node root){
	if (root!=null){
		emptyBST(root.left);
		emptyBST(root.right);
		
		System.out.print(root.Data+" ");
		root= null;
	}
	return root;
}



10. Lowest Common Ancestor
3, 14 = 8
1, 6 = 3 
13, 14 = 13
8, 8 = 8

static int LCA(Node root, int n1, int n2){
	if (root==null)
		return -1;

	if (n1 <= root.Data && n2 >= root.Data)
		return root.Data;

	else if(n1 < root.Data && n2 < root.Data)
		return LCA(root.left);

	else if(n1 > root.Data && n2 > root.Data)
		return LCA(root.right);

	return -1;
}


11. Print path to specific node
7 = 8, 3, 6, 7
14 = 8, 10, 13, 14
1 = 8, 3, 1

static boolean hasPath(Node root, int ele){
	if (root == null)
		return false;

	if (root!= null && root.data==ele)
		return true;

	if (ele < root.data)
		return hasPath(root.left, ele);

	if (ele > root.data)
		return hasPath(root.right, ele);

	return false;
}

static void PrintPath(Node root, int ele){
	if (!hasPath(root, ele)) {
      		System.out.println("Element Does Not Exist in the Tree!");
      		return;
    	}

	if (root!= null && root.data==ele)
		System.out.println(root.data);
		return;

	if (ele < root.data)
		System.out.println(root.data);
		PrintPath(root.left, ele);

	if (ele > root.data)
		System.out.println(root.data);
		PrintPath(root.right, ele);
}

PrintPath(root, ele) // function call




			8
                  3           10
               1     6           13
                    4 7             14














